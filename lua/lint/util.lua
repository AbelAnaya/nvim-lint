local M = {}
local vfn = vim.fn


-- Returns the path leading up to (and including) the given directory, based on
-- the current buffer's file path.
--
-- Example:
--
-- The buffer path is `foo/bar/baz.txt`. When calling this function with the
-- first argument set to `bar`, this function returns `foo/bar`.
function M.find_nearest_directory(directory)
  local filename = vfn.fnameescape(vfn.fnamemodify(vim.api.nvim_buf_get_name(0), ':p'))
  local relative_path = vfn.finddir(directory, filename .. ';')

  if relative_path == '' then
    return ''
  end

  return vfn.fnamemodify(relative_path, ':p')
end


--- Return a linter that wraps another Linter with a mapping function applied
--- on its parser function. This allows to modify diagnostics generated by a
--- linter.
---
--- Example, to remap the severity of a linter:
---
--- ```lua
--- local lint = require("lint")
--- lint.linters.cspell = require("lint.util").wrap(lint.linters.cspell, function(diagnostic)
---   diagnostic.severity = vim.diagnostic.severity.HINT
---   return diagnostic
--- end)
--- ```
---
---@param linter lint.Linter|fun():lint.Linter
---@param map fun(d: vim.Diagnostic): vim.Diagnostic
---@return lint.Linter|fun():lint.Linter
function M.wrap(linter, map)
  local function _wrap(l, m)
    local result = vim.deepcopy(l)
    result.parser = function(...)
      local diagnostics = l.parser(...)
      return vim.tbl_map(m, diagnostics)
    end
    return result
  end
  if type(linter) == "function" then
    return function()
      return _wrap(linter(), map)
    end
  else
    return _wrap(linter, map)
  end
end


---Find a command in node_modules
---@param cmd string
---@return string
---@example
--- local cmd = require("lint.util").from_node_modules("standard")
function M.from_node_modules(cmd)
  return M.find_executable({ "./node_modules/.bin/" .. cmd }, cmd)
end

---Search parent directories for a relative path to a command
---@param paths string[]
---@param default string
---@return string
---@example
--- local cmd = require("lint.util").find_executable({ "node_modules/.bin/eslint" }, "eslint")
function M.find_executable(paths, default)
  for _, path in ipairs(paths) do
    local normpath = vim.fs.normalize(path)
    local is_absolute = vim.startswith(normpath, "/")
    if is_absolute and vim.fn.executable(normpath) then
      return normpath
    end

    local idx = normpath:find("/", 1, true)
    local dir, subpath
    if idx then
      dir = normpath:sub(1, idx - 1)
      subpath = normpath:sub(idx)
    else
      -- This is a bare relative-path executable
      dir = normpath
      subpath = ""
    end
    local results = vim.fs.find(dir, { upward = true, path = vim.fn.getcwd(), limit = math.huge })
    for _, result in ipairs(results) do
      local fullpath = result .. subpath
      if vim.fn.executable(fullpath) == 1 then
        return fullpath
      end
    end
  end

  return default
end


return M
